#!/usr/bin/python
# -*- coding: utf-8 -*-

"""
This project is licensed under the New BSD License:

Copyright (c) 2012, Pierre-Yves Chibon

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
* Redistributions of source code must retain the above copyright notice,
this list of conditions and the following disclaimer.
* Redistributions in binary form must reproduce the above copyright
notice, this list of conditions and the following disclaimer in the
documentation and/or other materials provided with the distribution.
* Neither the name of the Wageningen University nor the names of its
contributors may be used to endorse or promote products derived from
this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ''AS IS'' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
THE POSSIBILITY OF SUCH DAMAGE.
"""

"""
This script retrieve the bibtex entries for PubMed identifier given.
"""


import argparse
import logging

import requests
from lxml import etree


class Article(object):
    author = ""
    title = ""
    volume = ""
    number = ""
    pages = ""
    year = ""
    month = ""
    day = ""
    doi = ""
    abstract = ""
    URL = ""
    eprint = ""
    journal = ""
    pubmedid = ""
    ISSN = ""

    def format_author(self):
        """ Return the author list in the expected format. """

    def get_key(self):
        """ Return the key for the article. """
        output = "{0}{1}{2}{3}".format(self.author.split(',')[0],
                                       self.day, self.month, self.year)
        return output

    def to_bibtex(self):
        output = """@article{{{key},
author = {{{author}}},
title = {{{title}}},
volume = {{{volume}}},
number = {{{number}}},
pages = {{{pages}}},
year = {{{year}}},
journal = {{{journal}}},
doi = {{{doi}}},
URL = {{{URL}}},
eprint = {{{eprint}}},
abstract = {{{abstract}}}
}}""".format(key=self.get_key(), author=self.author, title=self.title,
             volume=self.volume, number=self.number, pages=self.pages,
             year=self.year, journal=self.journal, doi=self.doi,
             URL=self.URL, eprint=self.eprint, abstract=self.abstract,
             )
        return output


def get_pubmed_xml(pmids):
    """ Retrieve the XML from pubmed efetch service for the given list
    of pubmed identifier.
    """
    url = 'http://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi' \
        '?db=pubmed&retmode=xml&id=%s' % (','.join(pmids))
    r = requests.get(url)
    return etree.XML(r.content)


def setup_parser():
    """ Set the main arguments. """
    parser = argparse.ArgumentParser(prog='pmid2bibtex')
    parser.add_argument('pmid', nargs='+',
                        help='PubMed identifier(s)')
    return parser


def extract_references(root):
    """ Extract the references from the XML. """
    articles = []
    for reference in root.iter("PubmedArticle"):
        article = Article()

        for element in reference.iter("PubDate"):
            for child in element.getchildren():
                if child.tag == 'Year':
                    article.year = child.text
                if child.tag == 'Month':
                    article.month = child.text
                if child.tag == 'Day':
                    article.day = child.text

        author = ""
        for element in reference.iter("Author"):
            for child in element.getchildren():
                if child.tag == 'LastName':
                    if not author:
                        author = child.text
                    else:
                        author += " and {0}".format(child.text)
                if child.tag == 'ForeName':
                        author += ", {0}".format(child.text)
        article.author = author

        for element in reference.iter("ArticleTitle"):
            article.title = element.text
            break

        for element in reference.iter("JournalIssue"):
            for child in element.getchildren():
                if child.tag == 'Volume':
                    article.volume = child.text
                if child.tag == 'Issue':
                    article.number = child.text

        for element in reference.iter("Journal"):
            for child in element.getchildren():
                if child.tag == 'ISOAbbreviation':
                    article.journal = child.text

        for element in reference.iter("Pagination"):
            for child in element.getchildren():
                article.pages = child.text
                break

        for element in reference.iter("ArticleIdList"):
            for child in element.getchildren():
                if child.tag == 'ArticleId':
                    if child.get('IdType') == 'doi':
                        article.doi = child.text
                    if child.get('IdType') == 'pubmed':
                        article.pubmedid = child.text

        articles.append(article)

    return articles


if __name__ == '__main__':
    parser = setup_parser()
    args = parser.parse_args()
    xml = get_pubmed_xml(args.pmid)
    articles = extract_references(xml)
    for article in articles:
        print article.to_bibtex()
